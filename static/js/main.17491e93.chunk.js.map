{"version":3,"sources":["bank.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["piggy_progress","coin","goal","CoinButton","props","Button","variant","fullWidth","onClick","setCoin","Number","increment","CoinIncrement","TextField","id","label","type","defaultValue","InputLabelProps","shrink","onChange","event","setIncrement","target","value","CoinGoal","setGoal","GoalReached","PiggyBank","Paper","LinearProgress","Container","src","PigSVG","alt","style","filter","App","useState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sPAAe,MAA0B,iCCSzC,SAASA,EAAeC,EAAMC,GAC5B,OAAID,EAAO,EACF,EACEA,EAAOC,EACT,IAECD,EAAOC,EAAQ,IAI3B,SAASC,EAAWC,GAClB,OACE,eAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,UAAU,OACVC,QAAS,WACPJ,EAAMK,QAAQL,EAAMH,KAAOS,OAAON,EAAMO,aAJ5C,mBAOSP,EAAMO,UAPf,YAYJ,SAASC,EAAcR,GACrB,OACE,cAACS,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,SACNC,KAAK,SACLT,UAAU,OACVU,aAAcb,EAAMO,UACpBO,gBAAiB,CACfC,QAAQ,GAEVC,SAAU,SAACC,GACTjB,EAAMkB,aAAaZ,OAAOW,EAAME,OAAOC,WAM/C,SAASC,EAASrB,GAChB,OACE,cAACS,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,OACNC,KAAK,SACLT,UAAU,OACVU,aAAcb,EAAMF,KACpBgB,gBAAiB,CACfC,QAAQ,GAEVC,SAAU,SAACC,GACTjB,EAAMsB,QAAQhB,OAAOW,EAAME,OAAOC,WAM1C,SAASG,EAAYvB,GACnB,OAAIA,EAAMH,MAAQG,EAAMF,KAEpB,8BACE,cAACG,EAAA,EAAD,CACEC,QAAQ,YACRC,UAAU,OACVC,QAAS,WACPJ,EAAMK,QAAQ,IAJlB,oCAYG,KAIX,SAASmB,EAAUxB,GACjB,OACE,eAACyB,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,UACE,cAACJ,EAAD,CAAUvB,KAAME,EAAMF,KAAMwB,QAAStB,EAAMsB,YAE7C,cAACG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACExB,QAAQ,cACRkB,MAAOxB,EAAeI,EAAMH,KAAMG,EAAMF,UAG5C,eAAC2B,EAAA,EAAD,WACGzB,EAAMH,KADT,MACkBG,EAAMF,QAGxB,cAAC2B,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,UACE,qBACEC,IAAKC,EACLC,IAAI,aACJC,MAAO,CACLC,OACE,cACC,IAAMpC,EAAeI,EAAMH,KAAMG,EAAMF,OACxC,YAKV,cAAC2B,EAAA,EAAD,UACE,cAAC1B,EAAD,CACEQ,UAAWP,EAAMO,UACjBV,KAAMG,EAAMH,KACZQ,QAASL,EAAMK,YAGnB,cAACoB,EAAA,EAAD,UACE,cAACjB,EAAD,CACED,UAAWP,EAAMO,UACjBW,aAAclB,EAAMkB,iBAGxB,cAACO,EAAA,EAAD,UACE,cAACF,EAAD,CACE1B,KAAMG,EAAMH,KACZC,KAAME,EAAMF,KACZO,QAASL,EAAMK,eAuBV4B,MAhBf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNrC,EADM,KACAQ,EADA,OAEW6B,mBAAS,KAFpB,mBAENpC,EAFM,KAEAwB,EAFA,OAGqBY,mBAAS,IAH9B,mBAGN3B,EAHM,KAGKW,EAHL,KAIb,OACE,cAACM,EAAD,CACE3B,KAAMA,EACNQ,QAASA,EACTE,UAAWA,EACXW,aAAcA,EACdpB,KAAMA,EACNwB,QAASA,KC9ITa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,kBAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,kBAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCoC,MAAMrC,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BjC,MAAK,SAACkC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMvC,MAAK,SAACC,GAClCA,EAAauC,aAAaxC,MAAK,WAC7BV,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMvC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OE/B/B+C,GAKA7B,M","file":"static/js/main.17491e93.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bank.845651bc.svg\";","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Container from \"@material-ui/core/Container\";\n\nimport PigSVG from \"./bank.svg\";\n\nfunction piggy_progress(coin, goal) {\n  if (coin < 0) {\n    return 0;\n  } else if (coin > goal) {\n    return 100;\n  } else {\n    return (coin / goal) * 100;\n  }\n}\n\nfunction CoinButton(props) {\n  return (\n    <Button\n      variant=\"contained\"\n      fullWidth=\"true\"\n      onClick={() => {\n        props.setCoin(props.coin + Number(props.increment));\n      }}\n    >\n      Store {props.increment} coins\n    </Button>\n  );\n}\n\nfunction CoinIncrement(props) {\n  return (\n    <TextField\n      id=\"standard-number\"\n      label=\"Amount\"\n      type=\"number\"\n      fullWidth=\"true\"\n      defaultValue={props.increment}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      onChange={(event) => {\n        props.setIncrement(Number(event.target.value));\n      }}\n    />\n  );\n}\n\nfunction CoinGoal(props) {\n  return (\n    <TextField\n      id=\"standard-number\"\n      label=\"Goal\"\n      type=\"number\"\n      fullWidth=\"true\"\n      defaultValue={props.goal}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      onChange={(event) => {\n        props.setGoal(Number(event.target.value));\n      }}\n    />\n  );\n}\n\nfunction GoalReached(props) {\n  if (props.coin >= props.goal) {\n    return (\n      <div>\n        <Button\n          variant=\"contained\"\n          fullWidth=\"true\"\n          onClick={() => {\n            props.setCoin(0);\n          }}\n        >\n          Goal Reached! Reset?\n        </Button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nfunction PiggyBank(props) {\n  return (\n    <Paper>\n      <Paper>\n        <CoinGoal goal={props.goal} setGoal={props.setGoal} />\n      </Paper>\n      <Paper>\n        <LinearProgress\n          variant=\"determinate\"\n          value={piggy_progress(props.coin, props.goal)}\n        />\n      </Paper>\n      <Paper>\n        {props.coin} / {props.goal}\n      </Paper>\n\n      <Paper>\n        <Container>\n          <img\n            src={PigSVG}\n            alt=\"piggy bank\"\n            style={{\n              filter:\n                \"grayscale(\" +\n                (100 - piggy_progress(props.coin, props.goal)) +\n                \"%)\",\n            }}\n          />\n        </Container>\n      </Paper>\n      <Paper>\n        <CoinButton\n          increment={props.increment}\n          coin={props.coin}\n          setCoin={props.setCoin}\n        />\n      </Paper>\n      <Paper>\n        <CoinIncrement\n          increment={props.increment}\n          setIncrement={props.setIncrement}\n        />\n      </Paper>\n      <Paper>\n        <GoalReached\n          coin={props.coin}\n          goal={props.goal}\n          setCoin={props.setCoin}\n        />\n      </Paper>\n    </Paper>\n  );\n}\n\nfunction App() {\n  const [coin, setCoin] = useState(0);\n  const [goal, setGoal] = useState(100);\n  const [increment, setIncrement] = useState(10);\n  return (\n    <PiggyBank\n      coin={coin}\n      setCoin={setCoin}\n      increment={increment}\n      setIncrement={setIncrement}\n      goal={goal}\n      setGoal={setGoal}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}